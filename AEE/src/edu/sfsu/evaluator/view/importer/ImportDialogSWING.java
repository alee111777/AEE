/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.sfsu.evaluator.view.importer;

import edu.sfsu.evaluator.EvaluatorController;
import edu.sfsu.evaluator.EvaluatorViewModel;
import edu.sfsu.evaluator.model.Entity;
import static edu.sfsu.evaluator.view.importer.ImportDialog.INITIAL_MESSAGE;
import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author eric
 */
public class ImportDialogSWING extends javax.swing.JDialog
{

    private EvaluatorViewModel viewModel;
    private EvaluatorController controller;
    private String lastDocSelected = "";
    private String lastFileDir = null;

    /**
     * Creates new form ImportDialogSWING
     */
    public ImportDialogSWING(EvaluatorViewModel viewModel,
                             EvaluatorController controller)
    {
        super(controller.getEvaluatorFrame());
        this.viewModel = viewModel;
        this.controller = controller;
        initComponents();

        this.setTitle("Import");

        ArrayList<String> docNames =
                new ArrayList(viewModel.getAvailableDocuments());
        Collections.sort(docNames);
        for (String docName
                : docNames)
        {
            docComboBox.addItem(docName);
        }
        populateVerComboBox();
    }

    public static void showImportDialog(EvaluatorViewModel viewModel,
                                        EvaluatorController controller)
    {
        ImportDialogSWING importDialog = new ImportDialogSWING(viewModel,
                                                               controller);
        importDialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        importDialog.setVisible(true);
    }
    
    public static void showImportDialog(
            EvaluatorViewModel viewModel,EvaluatorController controller,
            String docName, String verName)
    {
        ImportDialogSWING importDialog = new ImportDialogSWING(viewModel,
                                                               controller);
        importDialog.reorderDocComboBox(docName);
        importDialog.reorderVerComboBox(verName);
        importDialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        importDialog.setVisible(true);
    }

    private void populateVerComboBox()
    {
        String docName = (String) docComboBox.getSelectedItem();
        if (docName == null)
        {
            return;
        }
        try
        {
            verComboBox.removeAllItems();
            ArrayList<String> verNames =
                    viewModel.getAvailableDocumentVersions(docName);
            Collections.sort(verNames);
            for (String verName
                    : verNames)
            {
                verComboBox.addItem(verName);
            }
        } catch (Exception e)
        {
            controller.showErrorMessage("Error populating ver combo box");
        }
        
    }
    
    public void reorderVerComboBox(String firstVerName) {
        verComboBox.removeAllItems();
        String docName = (String) docComboBox.getSelectedItem();
        if (docName == null)
        {
            return;
        }
        try
        {
            verComboBox.removeAllItems();
            ArrayList<String> verNames =
                    viewModel.getAvailableDocumentVersions(docName);
            Collections.sort(verNames);
            verComboBox.addItem(firstVerName);
            for (String verName
                    : verNames)
            {
                if (!verName.matches(firstVerName))
                    verComboBox.addItem(verName);
            }
        } catch (Exception e)
        {
            controller.showErrorMessage("Error populating ver combo box");
        }
    }
    
    public void reorderDocComboBox(String firstDocName) {
        //docComboBox.removeAllItems();
        ArrayList<String> docNames =
                new ArrayList(viewModel.getAvailableDocuments());
        Collections.sort(docNames);
        docComboBox.addItem(firstDocName);
        for (String docName
                : docNames)
        {
            if (!docName.matches(firstDocName))
                docComboBox.addItem(docName);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jLabel1 = new javax.swing.JLabel();
        docComboBox = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        verComboBox = new javax.swing.JComboBox();
        browseButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        fileTextField = new javax.swing.JTextField();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Document");

        docComboBox.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                docComboBoxActionPerformed(evt);
            }
        });

        jLabel2.setText("Version");

        browseButton.setText("Browse");
        browseButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                browseButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Annotation File");

        fileTextField.setText("* Select File *");

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(118, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(okButton)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(cancelButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(docComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(verComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(fileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(browseButton)))
                .addGap(44, 44, 44))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(docComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(verComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseButton)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okButton)
                    .addComponent(cancelButton))
                .addGap(70, 70, 70))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_browseButtonActionPerformed
    {//GEN-HEADEREND:event_browseButtonActionPerformed
        JFileChooser fc;
        if (lastFileDir != null)
        {
            fc = new JFileChooser(lastFileDir);
        } else
        {
            fc = new JFileChooser();
        }
        fc.setFileFilter(new FileNameExtensionFilter("XML file", "xml"));
        fc.setMultiSelectionEnabled(false);
        int returnVal = fc.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION)
        {
            File file = fc.getSelectedFile();

            if (file.isFile())
            {
                lastFileDir = file.getParent();
                fileTextField.setText(file.getPath());
            }
        }
    }//GEN-LAST:event_browseButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_okButtonActionPerformed
    {//GEN-HEADEREND:event_okButtonActionPerformed
        try
        {
            String docName = (String) docComboBox.getSelectedItem();
            String verName = (String) verComboBox.getSelectedItem();
            if ((docName == null) || (verName == null))
            {
                return;
            }

            String filePath = fileTextField.getText();
            
            System.out.println(filePath);
            
            if (filePath.compareTo(INITIAL_MESSAGE) == 0)
            {
                return;
            }
            ArrayList<Entity> annotations =
                    EntityReader.readEntities(filePath);
            for (Entity a
                    : annotations)
            {
                controller.requestEntityTypeAddFromFile(a.getEntityType());
                controller.requestAddEntity(docName, verName, a);
                
            }
            viewModel.repaintView();
        } catch (Exception e)
        {
        }
        this.dispose();
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cancelButtonActionPerformed
    {//GEN-HEADEREND:event_cancelButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void docComboBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_docComboBoxActionPerformed
    {//GEN-HEADEREND:event_docComboBoxActionPerformed
        String docName = (String) docComboBox.getSelectedItem();
        if (docName.compareTo(lastDocSelected) != 0)
        {
            lastDocSelected = docName;
            populateVerComboBox();
        }
    }//GEN-LAST:event_docComboBoxActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JComboBox docComboBox;
    private javax.swing.JTextField fileTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JButton okButton;
    private javax.swing.JComboBox verComboBox;
    // End of variables declaration//GEN-END:variables
}
